~~Copyright 2014 Acxio
~~
~~Licensed under the Apache License, Version 2.0 (the "License");
~~you may not use this file except in compliance with the License.
~~You may obtain a copy of the License at
~~
~~  http://www.apache.org/licenses/LICENSE-2.0
~~
~~Unless required by applicable law or agreed to in writing, software
~~distributed under the License is distributed on an "AS IS" BASIS,
~~WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~See the License for the specific language governing permissions and
~~limitations under the License.
 -----
 AGIA
 -----
 Acxio
 -----
 2014-06-19
 -----

Configuration du plan de classement

 Le plan de classement est normalement utilisé dans un objet de type
 {{{../apidocs/fr/acxio/tools/agia/alfresco/configuration/NodeFactory.html}NodeFactory}}.
 
 Il peut être déclaré directement à l'intérieur d'un NodeFactory, ou bien comme
 un bean indépendant référencé dans un NodeFactory.
 
* Structure de configuration

 La structure de configuration est décrite dans un schéma XML.
 Le principe de cette configuration est de décrire un modèle du résultat final
 souhaité pour chaque enregistrement traité.
 Cela peut conduite à la création ou à la mise à jour d'un ensemble de dossiers
 et de documents pour un seul enregistrement.
 
 En voici la vision générale:
 
[../../images/alfxsd_uml_cd.png] Diagramme de classes du schéma XML

 Pour résumer, un noeud (dossier ou document) doit contenir une collection de
 propriétés et une collection d'aspects, même si elles sont vides.
 
** Noeuds (dossiers ou documents)
 
 Un noeud (dossier ou document) peut avoir:
 
 * un identifiant (<<<id>>>), notamment utilisé pour y faire référence dans un
 NodeFactory
 
 * un type (<<<nodeType>>>), qui est un nom qualifié reconnu par Alfresco, par
 exemple <<<custom:mytype>>> ou <<<{http://custom/namespace/1.0}mytype>>>.
 Si le type n'est pas indiqué, un type par défaut est utilisé selon que le noeud
 est un dossier (<<<cm:folder>>>) ou un document (<<<cm:document>>>).
 
 * un mode de gestion de version (<<<versionOperation>>>), qui peut prendre une
 valeur parmi: <<<error>>>, <<<version>>>, <<<replace>>> et <<<update>>>.
 La valeur par défaut est <<<error>>>.
 
 * un identifiant servant de destination pour les associations
 (<<<assocTargetId>>>).
 Cet identifiant est unique pour l'ensemble des noeuds qui composent la
 configuration et n'est utilisé que pour créer des associations.
 
 * une collection d'associations
 
 []
 
 Un dossier peut avoir une condition, c'est à dire une expression Java qui
 retourne <<<true>>> ou <<<false>>>.
 Cette condition permet de créer une configuration où la création d'un ensemble
 de dossiers et de documents dépend par exemple du type de document ou d'un
 ensemble de données de l'enregistrement traité.
 
 Un dossier peut contenir des dossiers et des documents, déclarés dans cet
 ordre.
 
 Un document peut avoir:
 
 * un chemin vers un fichier de contenu (<<<contentPath>>>), absolu ou relatif
 
 * un type MIME pour le contenu (<<<mimeType>>>)
 
 * un descripteur d'encodage (<<<encoding>>>)
 
 []
 
** Propriétés
 
 Une propriété doit avoir un nom (<<<localName>>>), qui est un nom qualifié
 reconnu par Alfresco, et peut avoir une référence de convertisseur.
 
 Elle peut avoir de 0 à plusieurs valeurs.
 Les valeurs doivent être de type de chaîne de caractères et peuvent être
 calculées à l'aide d'expressions, mais la chaîne de caractères finale doit
 pouvoir être convertie par Alfresco dans le type décrit dans le modèle de
 contenu ciblé.
 Par exemple pour une propriété de type date dans un modèle de contenu Alfresco,
 la valeur de la propriété doit est formattée selon la norme ISO 8601.
 
 Le convertisseur référencé par la propriété permet de convertir l'ensemble
 des valeurs de la propriété.
 Un type de convertisseur très utilisé est celui qui reformatte les dates
 au format ISO 8601.
 
 NB: Chaque noeud doit avoir une propriété ayant le nom <<<cm:name>>>, et ayant
 une valeur non nulle, non vide et unique dans le dossier dans lequel le noeud
 sera créé.
 
** Aspects
 
 Un aspect doit avoir un nom (<<<name>>>), qui est un nom qualifié reconnu par
 Alfresco.
 
 Les propriétés d'un aspect ne sont pas portées par l'aspect lui même:
 elles sont toutes listées dans le noeud portant l'aspect.
 
** Associations
 
 L'ajout d'associations est optionnel.
 
 Les associations listées dans un noeud ont implicitement pour source ce même
 noeud.
 
 Il existe deux types d'associations: les associations directes et les
 associations basées sur des recherches.
 
 Une association doit avoir un type (<<<type>>>), qui est un nom qualifié
 reconnu par Alfresco.
 
 Une association directe (<<<ref>>>) contient uniquement l'identifiant de noeud
 destination (indiqué dans l'attribut <<<assocTargetId>>>).
 
 Une association de type recherche (<<<query>>>) doit avoir un langage de
 recherche (<<<language>>>) et contenir l'expression de recherche.
 Les langages de recherche disponibles sont ceux fournis par Alfresco dans ses
 API (uniquement Lucene à la date d'écriture de cette documentation).
 Lors de l'utilisation de la configuration pour créer les noeuds, cette
 recherche sera effectuée lors de la création des noeuds dans Alfresco, et
 chaque noeud présent dans le résultat sera la destination d'une association
 dont la source est le noeud nouvellement créé ou mis à jour.