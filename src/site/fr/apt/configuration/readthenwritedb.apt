~~Copyright 2014 Acxio
~~
~~Licensed under the Apache License, Version 2.0 (the "License");
~~you may not use this file except in compliance with the License.
~~You may obtain a copy of the License at
~~
~~  http://www.apache.org/licenses/LICENSE-2.0
~~
~~Unless required by applicable law or agreed to in writing, software
~~distributed under the License is distributed on an "AS IS" BASIS,
~~WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~See the License for the specific language governing permissions and
~~limitations under the License.
 -----
 AGIA
 -----
 Acxio
 -----
 2014-06-23
 -----

Tâche de lecture du fichier CSV et injection dans une base de données

 Cette tâche est la seconde de l'exemple (readthenwrite).
 
+---------------------------+
		<batch:step id="readthenwrite" next="loadtheninject">
			<batch:tasklet transaction-manager="businessTransactionManager">
				<batch:chunk reader="csvInputReader" writer="hibernateWriter" commit-interval="10"/>
			</batch:tasklet>
		</batch:step>
+---------------------------+
 
 C'est une tâche standard de Spring Batch: un module de lecture
 (<<<csvInputReader>>>) permet de lire les données, alors qu'un module
 d'écriture (<<<hibernateWriter>>>) permet de les écrire dans une base de
 données.
 
 La tâche est configurée avec un gestionnaire de transactions
 (<<<businessTransactionManager>>>) qui permet de ne pas laisser la base de
 données et la lecture du fichier CSV dans un état indéterminé. Cela permet par
 exemple de réaliser un rollback de façon à pouvoir relancer la tâche sur un
 environnement propre.
 
 La tâche gère les données par paquets (<<<batch:chunk>>>) contenant 10
 enregistrements (<<<commit-interval>>>).
 
 Il est possible de modifier la granularité des paquets en fonction des
 ressources disponibles et de la fréquence des cas d'erreur.
 
 Dans le cas d'exemple, si une seule valeur est problématique dans un paquet
 de 10 valeurs écrites dans la base de données, l'ensemble des 10 valeurs ne
 sera pas écrit dans la base de données (principe du rollback), et le traitement
 du processus complet (<<<batch:job>>>) s'arrête avec une erreur.

* Lecture du fichier CSV

 La lecture du fichier CSV est configurée pour réaliser une correspondance entre
 les données lues et une représentation prête à l'emploi pour la base de données.
 
 Dans le cas présent, la représentation utilisée pour la base de données est la
 même que celle utilisée ensuite pour écrire les documents dans Alfresco, sauf
 que les contenus restent à leur emplacement d'origine sous forme de fichiers.
 
 Le premier élément nécessaire est le module de lecture:
 
+---------------------------+
	<bean id="csvInputReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="file:data/input-copy.csv"/>
		<property name="lineMapper" ref="inputLineMapper"/>
		<property name="linesToSkip" value="1"/>
	</bean>
+---------------------------+

 Il utilise le fichier issu de la copie de la première étape (<<<resource>>>).
 
 Il fait appel à un module de correspondance qui transforme les lignes du
 fichier CSV en objet en mémoire.
 
 Enfin, la première ligne du fichier est ignorée car elle contient les titres
 des colonnes.
 
 Le module de correspondance est configuré comme suit:

+---------------------------+
	<bean id="inputLineMapper"
 		class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
 		<property name="lineTokenizer" ref="inputLineTokenizer"/>
 		<property name="fieldSetMapper" ref="alfrescoFieldSetMapper"/>
 	</bean>
+---------------------------+

 Il découpe les lignes en colonnes (<<<lineTokenizer>>>) puis transforme chaque
 ligne en objet destiné à Alfresco (<<<fieldSetMapper>>>).
 
 Le module de découpage des colonnes est défini comme suit:
 
+---------------------------+
 	<bean id="inputLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
 		<property name="delimiter" value=","/>
 		<property name="names" value="A,B,C,D,E"/>
	</bean>
+---------------------------+

 Il utilise la virgule comme délimiteur de colonne, et il définit les noms des
 colonnes à A, B, C, D et E.

 Le module de transformation est configuré comme suit:

+---------------------------+
	<bean id="alfrescoFieldSetMapper"
		class="fr.acxio.tools.agia.alfresco.AlfrescoFieldSetMapper">
		<property name="nodeFactory" ref="testNodeFactory"/>
	</bean>
+---------------------------+

 Il utilise une {{{./nodefactory.html}fabrique d'objets}} destinés à Alfresco
 (<<<nodeFactory>>>).
 
 Sa propriété <<<variableName>>> est par défaut définie à <<<in>>>.
 Elle permet de spécifier le nom de la variable contenant le tableau des
 colonnes de la ligne courante lue depuis le fichier CSV.
 
 Cette variable est utilisable dans la fabrique d'objets destinés à Alfresco
 dans des {{{./nodefactory.html#Expressions}expressions}} pour attribuer des
 valeurs aux propriétés, par exemple.
 
* {Ecriture de la base de données}

 Les données peuvent être stockées dans une base de données en utilisant le
 modèle correspondant à la notion de noeuds décrite dans la
 {{{./alfdomain.html}configuration du plan de classement}}.
 
 L'écriture dans la base de données des objets destinés à Alfresco se fait à
 l'aide d'un <<<HibernateNodeWriter>>>.
 
 La déclaration d'un tel module est assez simple:
 
+---------------------------+
	<bean id="hibernateWriter" class="fr.acxio.tools.agia.alfresco.HibernateNodeWriter">
		<property name="nodeDao" ref="nodeDao"/>
		<property name="sessionFactory" ref="businessSessionFactory"/>
	</bean>
+---------------------------+

 Le module a besoin de deux autres modules pour fonctionner:
 
 * un module de gestion des actions de base de données sur les objets
 (<<<nodeDao>>>)

 * un gestionnaire de sessions (<<<sessionFactory>>>)

 []
 
 En voici un exemple de déclaration:
 
+---------------------------+
	<bean id="nodeDao" class="fr.acxio.tools.agia.alfresco.dao.HibernateNodeDao">
		<property name="sessionFactory" ref="businessSessionFactory" />
	</bean>
	
	<bean id="businessSessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" destroy-method="destroy">
		<property name="annotatedClasses">
			<list>
				<value>fr.acxio.tools.agia.alfresco.domain.Node</value>
				<value>fr.acxio.tools.agia.alfresco.domain.Folder</value>
				<value>fr.acxio.tools.agia.alfresco.domain.Document</value>
				<value>fr.acxio.tools.agia.alfresco.domain.Aspect</value>
				<value>fr.acxio.tools.agia.alfresco.domain.Property</value>
				<value>fr.acxio.tools.agia.alfresco.domain.QName</value>
				<value>fr.acxio.tools.agia.alfresco.domain.Association</value>
				<value>fr.acxio.tools.agia.alfresco.domain.RefAssociation</value>
				<value>fr.acxio.tools.agia.alfresco.domain.QueryAssociation</value>
			</list>
		</property>
		<property name="dataSource" ref="businessDataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener" />
				</entry>
			</map>
		</property>
	</bean>

	<bean id="businessDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="jdbc:h2:file:db/h2agiadb" />
		<property name="username" value="sa" />
		<property name="password" value="" />
		<property name="testWhileIdle" value="false"/>
		<property name="validationQuery" value=""/>
	</bean>
	
	<bean id="businessTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="businessSessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="businessTransactionManager" />
+---------------------------+

 Cette déclaration, un peu longue, définit plusieurs modules nécessaires pour
 l'écriture dans la base de données des objets destinés à Alfresco.
 
 Le module <<<businessSessionFactory>>> génère les sessions pour la base de
 données.
 
 Il doit être conservé en l'état pour toutes ses utilisations, hormis la
 propriété <<<hibernate.dialect>>> qui doit être ajustée à la base de données
 utilisée.
 
 Cette propriété s'accorde avec la déclaration du module
 <<<businessDataSource>>> qui définit la configuration de la connexion à la base
 de données.
 
 Enfin, le module <<<businessTransactionManager>>> et la dernière déclaration
 indiquent le mode de gestion des transactions. Ils sont nécessaires et
 immuables.